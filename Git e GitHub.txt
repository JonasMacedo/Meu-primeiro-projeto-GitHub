Olá!! Se acessou esse arquivo é porque precisa de ajuda, talvez esse documento 
lhe ajude. =D

Git é uma ferramenta de controle de versões.
Ele nos permite manter um histórico de todos os pontos de alterações 
dos nossos projetos ou arquivos, permitindo também que cada pessoa 
trabalhe em uma versão diferente do mesmo projeto, impedindo que, ao realizar 
uma alteração, altere a versão que outra pessoa está trabalhando. 
Dessa forma, caso haja algum erro, ele não irá refletir na versão de outra pessoa e, 
se precisar, é só voltar para uma versão anterior em que o projeto 
estava funcionando perfeitamente.

GitHub é um serviço web que permite hospedagens de projetos git.
Ao hospedar um projeto no github, possibilitamos que todos os envolvidos ou interessados 
no projeto tenham um acesso mais fácil e trabalhem de forma centralizada e organizada.
Além disso, o github nos concede diversas ferramentas para um melhor controle do projeto, 
como por exemplo, quais usuários o alteraram, o que foi alterando, e quando foi alterado, 
possibilita também que os usuários relatem problemas e muito mais.

Por que usar o git e o github juntos?
Pense que o git é quem fará o controle das versões dos seus projetos, 
e o github será apenas o local em que você irá hospedar essas versões,
para tornar acessível a outras pessoas.

-------------------------------- Parte 01 ----------------------------------------------------------- 

01- Usando o Git.

Crie uma pasta com um nome qualquer, precisamos de alguma forma, 
dizer que iremos utilizar o git nessa pasta, ou seja, devemos fazer dela um repositório, 
para trabalharmos nela com o git e podemos fazer isso da seguinte maneira:

Por meio do terminal(CMD) ou do git-bash, vá até a pasta criada e dentro dela digite o comando:
- git init

E receberemos uma resposta parecida com essa:
- Initialized empty Git repository in 
	/home/"NomeDoUsuario"/Documentos/"NomeDaPastaCriada"/.git/

Pronto! Criamos nosso primeiro repositório local e já podemos começar a trabalhar com o git, 
em nossa máquina.

02- Verificando.-------------------------------------------------------

Para verifar o estado do(s) arquivo(s), se houve alterações ou não, usamos outro comando:
- git status

E receberemos uma resposta parecida com essa:
-On branch master
	Your branch is up to date with 'origin/master'.

	Changes not staged for commit:
  		(use "git add <file>..." to update what will be committed)
  		(use "git checkout -- <file>..." to discard changes in working directory)

        	modified:   SeuArquivo.txt

	no changes added to commit (use "git add" and/or "git commit -a")

Esse comando nos permite verificar o status dos nossos arquivos.
Os arquivos que estiverem em VERMELHO são arquivos que nunca foram salvos no git 
ou que tiveram alteração e essa alteração ainda não foi salva.
Se estiver verde, significa que já foi salvo.

03- Salvando.-------------------------------------------------------

Se arquivo está em vermelho, significa que esse arquivo não foi salvo no git.
para salvar basta utilizar o seguinte comando:
- git add "NomeDoArquivo"

Ou se quiser salvar todos os arquivos dentro da pasta:
- git add .

Ótimo, agora o arquivo esta salvo no Git, e já pode ser feito um COMMIT.


04- Commitando.-------------------------------------------------------

Um commit é simplesmente criar uma nova versão do nosso arquivo ou projeto. 
Quando realizamos um commit, o git cria uma nova versão com os arquivos que estão salvos lá, 
por isso, antes de fazer um commit devemos SEMPRE salvar os arquivos desejados, como visto acima. 

Podemos fazer um commit com o comando a seguir:
- git commit

Nesse momento, o git abrirá uma nova tela pedindo para informar um comentário 
para explicar do que se trata o commit.

Mas podemos simplificar, informando a mensagem diretamente no comando. 
Como no exemplo abaixo:
- git commit -m "ComentárioExplicativoCurtoSobreCommit"

Seguindo estes comandos corretamente, você terá feito um commit e criado uma nova versão.


05- Relatorio de Commits.-----------------------------------------------

Se quiser, pode verificar todos os commits já feitos no projeto, 
através do comando:
-git log

Obs.: Util para verificar se seu commit realmente foi realizado corretamente.


06- Resumo.-------------------------------------------------------

Resumo rapido.

1- Verifique o estado do arquivo, e veja o que acontece, se houve alguma alteração.
Comando: git status

2- Salve o arquivo ou projeto modificado ou novo, se necessario.
Comando: git add "NomeDoArquivo" 
Comando se quiser salvar todos os arquivos dentro da pasta: git add .

3- Arquivo salvo, só resta realizar o commit, criando uma nova verção no Git.
Comando: git commit -m"ComentárioExplicativoCurtoSobreCommit"

4- Verificar os commits já feito no projeto.
Comando: git log

-------------------------------- Parte 02 ----------------------------------------------------------- 

Conectando respositorio local com o GitHub.

Agora vamos conectar o nosso repositório LOCAL(sua maquina pessoal), 
com o nosso repositório do GitHub(Servidor em nuvem) podemos fazer isso 
através do git.

Então, abra seu terminal(CMD) novamente ou seu git-bash, entre na pasta em que está o projeto 
e digite o comando a seguir:
- git remote add origin <url do seu repositorio no git>

Dessa forma nosso repositório local foi conectado ao nosso no github.
Então vamos enviar nossos arquivos para o github, através do seguinte comando:
- git push origin master

O git irá pedir seu usuário e sua senha do Github, após digitar irá começar o upload. Feito isso 
o arquivo estara hospedado no GitHub.

01- Clonando respositorio.-----------------------------------------------

Agora quando precisar baixar seu projeto basta ir no github clicar em “Clone or download”.

Copiar a URL que aparecer e através do terminal(CMD) ou git-bash, entrar em uma pasta desejada 
e digitar o comando:
- git clone <url do clone de seu repositorio no git>

Dessa forma o git irá fazer o download do projeto para o seu computador. 
Esse comando pode ser utilizado tanto nos seus repositórios, quanto nos repositórios públicos 
de outras pessoas.

-------------------------------- Parte 03 ----------------------------------------------------------- 

Usando Branch.

Uma outra funcionalidade interessante do git são os ramos ou “Branchs”.
Branchs são como ambientes de desenvolvimento diferentes para o mesmo projeto ou arquivo.

Por padrão, no git, temos uma única branch chamada MASTER.

Master é, por padrão, a branch principal, dentro dela sempre deve estar o último conteúdo confiável 
do projeto ou arquivo, pois uma vez na master, essas alterações podem ser disponibilizadas ao público 
a qualquer momento.

É uma boa prática criar uma nova Branch, sempre que trabalhar em uma nova atividade dentro do projeto, 
commitar todas as novas versões dentro dessa nova branch.

E ao final da atividade, realizar um pedido para adicionar as novas alterações dessa branch na master, 
esse pedido passará por uma revisão e, só após a revisão, podera ser adicionado as alterações a master.

Pode parecer complicado, mas verá que na verdade é bem simples.

Para criar nossa branch devemos dar um nome ela. 
O comando deverá ficar assim:
- git branch "Nome"

Para verificar nossas branchs ativas, usamos o comando:
-git branch

Ao verificar as branchs ativas.
Repare que haverá um asterisco(*) na master na master ou em alguma branch, 
isso significa que o arquivo esta em USO. 

Então vamos alterar para a branch utilizando o comando:
- git checkout "NomeDaBranchDesejada"  

Através do git checkout podemos escolher qual branch queremos trabalhar.

Podemos fazer isso tudo com esse único comando:
- git checkout -b "NomeDaBranchDesejada"