

Conteudo sobre Git

Olá!! Se acessou esse arquivo é porque precisa de ajuda, talvez esse documento 
lhe ajude. =D

Git é uma ferramenta de controle de versões.

Ele nos permite manter um histórico de todos os pontos de alterações dos nossos projetos ou arquivos, permitindo também que cada pessoa trabalhe 
em uma versão diferente do mesmo projeto, impedindo que, ao realizar uma alteração, altere a versão que outra pessoa está trabalhando. 

Dessa forma, caso haja algum erro, ele não irá refletir na versão de outra pessoa e, se precisar, é só voltar para uma versão anterior em que o 
projeto estava funcionando perfeitamente.

GitHub é um serviço web que permite hospedagens de projetos git.

Ao hospedar um projeto no github, possibilitamos que todos os envolvidos ou interessados no projeto tenham um acesso mais fácil e trabalhem de 
forma centralizada e organizada. 
Além disso, o github nos concede diversas ferramentas para um melhor controle do projeto, como por exemplo, quais usuários o alteraram, o que 
foi alterando, e quando foi alterado, possibilita também que os usuários relatem problemas e muito mais.

Por que usar o git e o github juntos?
Pense que o git é quem fará o controle das versões dos seus projetos, e o github será apenas o local em que você irá hospedar essas versões, para 
tornar acessível a outras pessoas.

---------------  01- Configurando o Git ------------------------------------------------------------------------

Git

O download do Git pode ser realizado pelo link https://git-scm.com/download/win

Os comanddos a seguir poderam ser realizado no CMD ou git-bash.

Para identifica todas as informacao do Git:
- git config --list
Retornara todas as informacoes do Git.

Para configurar o usuario no Git:
- git config --global user.name "XXXXX XXXX"

Para configurar o usuario no email: 
- git config --global user.email "XXXXX @ XXXX"

Para identificar a informacao de alguma chave
- git config user.name 
- git config user.email 
Por padrao retornara a contida para a chave

---------------  02-Criando Repositorio ------------------------------------------------------------------------

01- Usando o Git.

Crie uma pasta com um nome qualquer, precisamos de alguma forma, dizer que iremos utilizar o git nessa pasta, ou seja, 
devemos fazer dela um repositório, para trabalharmos nela com o git e podemos fazer isso da seguinte maneira:

Por meio do terminal(CMD) ou do git-bash, vá até a pasta criada e dentro dela digite o comando:
- git init

E receberemos uma resposta parecida com essa:
- Initialized empty Git repository in 
	/home/"NomeDoUsuario"/Documentos/"NomeDaPastaCriada"/.git/

Pronto! Com o retorno INITIALIZED com o arquivo .git, significa que criamos nosso primeiro repositório local e já podemos 
começar a trabalhar com o git 

---------------  03- Verificando ------------------------------------------------------------------------

Para verifar o estado do(s) arquivo(s), se houve alterações ou não, usamos outro comando:
- git status

E receberemos uma resposta parecida com essa:
-On branch master
	Your branch is up to date with 'origin/master'.

	Changes not staged for commit:
  		(use "git add <file>..." to update what will be committed)
  		(use "git checkout -- <file>..." to discard changes in working directory)

        	modified:   SeuArquivo.txt

	no changes added to commit (use "git add" and/or "git commit -a")

Esse comando nos permite verificar o status dos nossos arquivos.

Os arquivos que estiverem em VERMELHO são arquivos que nunca foram salvos no git ou que tiveram alteração, e essa alteração ainda não foi salva.

Se estiver VERDE ou BRANCA, ou dependendo da configuração do seu terminal, significa que já foi salvo.


---------------  04- Salvando ------------------------------------------------------------------------

Se arquivo está em vermelho, significa que esse arquivo não foi salvo no git.

Para salvar basta utilizar o seguinte comando:
- git add "NomeDoArquivo"

Ou se quiser salvar todos os arquivos dentro da pasta:
- git add .

Ótimo, agora o arquivo esta salvo no Git, e já pode ser feito um COMMIT.

Desta forma os arquivos estarao na area de STAGED, ou seja este arquivo ainda nao foi enviado para o Git esta apenas aguardando para ser enviado.

Exemplo: 

Como se fosse uma apresentacao de uma banda.
Enquanto uma banda esta tocando, a outra estaria em STAGED, no caso seria chamando do camarim, e ficaria aguardado para entrar no palco.
No caso o palco seria o COMMIT.

---------------  05- Commitando ------------------------------------------------------------------------

Um commit é simplesmente criar uma nova versão do nosso arquivo ou projeto.

Quando realizamos um commit, o git cria uma nova versão com os arquivos que estão salvos lá, por isso, antes de fazer um commit devemos SEMPRE 
salvar os arquivos desejados, como visto acima. 

Podemos fazer um commit com o comando a seguir:
- git commit

Nesse momento, o git abrirá uma nova tela pedindo para informar um comentário para explicar do que se trata o commit.

Mas podemos simplificar, informando a mensagem diretamente no comando. 
Como no exemplo abaixo:
- git commit -m "ComentárioExplicativoCurtoSobreCommit"

Seguindo estes comandos corretamente, você terá feito um commit e criado uma nova versão.

---------------  06- Enviando o Commit para o GitHub ------------------------------------------------------------------------

Então vamos enviar nossos arquivos para o github, através do seguinte comando:
- git push origin master

O git podera pedir seu usuário e sua senha do Github, após digitar irá começar o UpLoad dos arquivos para o oGitHub. 
Feito isso o arquivo estara hospedado no GitHub.

